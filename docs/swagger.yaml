basePath: /
definitions:
  dtos.CommentRequest:
    properties:
      message:
        type: string
      photo_id:
        type: integer
    required:
    - message
    - photo_id
    type: object
  dtos.CommentUpdateRequest:
    properties:
      message:
        type: string
    required:
    - message
    type: object
  dtos.JSONSwaggerCreatedResponses:
    properties:
      code:
        example: 201
        type: integer
      data: {}
      errors: {}
    type: object
  dtos.JSONSwaggerOKResponses:
    properties:
      code:
        example: 200
        type: integer
      data: {}
      errors: {}
    type: object
  dtos.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  dtos.PhotoRequest:
    properties:
      caption:
        type: string
      photo_url:
        type: string
      title:
        type: string
    required:
    - photo_url
    - title
    type: object
  dtos.SocialMediaRequest:
    properties:
      name:
        type: string
      social_media_url:
        type: string
    required:
    - name
    - social_media_url
    type: object
  dtos.UserRequest:
    properties:
      age:
        type: integer
      email:
        type: string
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - age
    - email
    - password
    - username
    type: object
  dtos.UserUpdateRequest:
    properties:
      email:
        type: string
      username:
        type: string
    required:
    - email
    - username
    type: object
info:
  contact:
    email: claraavelitaa@gmail.com
    name: Clara Velita Pranolo
  description: This is swagger for final project training golang mnc service with
    Hacktiv8
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Final Project Training Golang MNC Service Api
  version: "1.0"
paths:
  /comments:
    get:
      consumes:
      - application/json
      description: This endpoint for get all comment
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.JSONSwaggerOKResponses'
      security:
      - BearerToken: []
      summary: Get all comment
      tags:
      - Comments
    post:
      consumes:
      - application/json
      description: This endpoint for create photo
      parameters:
      - description: payload
        in: body
        name: services
        required: true
        schema:
          $ref: '#/definitions/dtos.CommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.JSONSwaggerCreatedResponses'
      security:
      - BearerToken: []
      summary: Create photo
      tags:
      - Comments
  /comments/{commentId}:
    delete:
      consumes:
      - application/json
      description: This endpoint for delete comment
      parameters:
      - description: CommentID
        in: path
        name: commentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.JSONSwaggerOKResponses'
      security:
      - BearerToken: []
      summary: Delete comment
      tags:
      - Comments
    put:
      consumes:
      - application/json
      description: This endpoint for update comment
      parameters:
      - description: CommentID
        in: path
        name: commentId
        required: true
        type: integer
      - description: payload
        in: body
        name: services
        required: true
        schema:
          $ref: '#/definitions/dtos.CommentUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.JSONSwaggerOKResponses'
      security:
      - BearerToken: []
      summary: Update comment
      tags:
      - Comments
  /photos:
    get:
      consumes:
      - application/json
      description: This endpoint for get all photo
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.JSONSwaggerOKResponses'
      security:
      - BearerToken: []
      summary: Get all photo
      tags:
      - Photos
    post:
      consumes:
      - application/json
      description: This endpoint for create photo
      parameters:
      - description: payload
        in: body
        name: services
        required: true
        schema:
          $ref: '#/definitions/dtos.PhotoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.JSONSwaggerCreatedResponses'
      security:
      - BearerToken: []
      summary: Create photo
      tags:
      - Photos
  /photos/{photoId}:
    delete:
      consumes:
      - application/json
      description: This endpoint for delete photo
      parameters:
      - description: PhotoID
        in: path
        name: photoId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.JSONSwaggerOKResponses'
      security:
      - BearerToken: []
      summary: Delete photo
      tags:
      - Photos
    put:
      consumes:
      - application/json
      description: This endpoint for update photo
      parameters:
      - description: PhotoID
        in: path
        name: photoId
        required: true
        type: integer
      - description: payload
        in: body
        name: services
        required: true
        schema:
          $ref: '#/definitions/dtos.PhotoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.JSONSwaggerOKResponses'
      security:
      - BearerToken: []
      summary: Update photo
      tags:
      - Photos
  /socialmedias:
    get:
      consumes:
      - application/json
      description: This endpoint for get all social medias
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.JSONSwaggerOKResponses'
      security:
      - BearerToken: []
      summary: Get all social medias
      tags:
      - Social Medias
    post:
      consumes:
      - application/json
      description: This endpoint for create social media
      parameters:
      - description: payload
        in: body
        name: services
        required: true
        schema:
          $ref: '#/definitions/dtos.SocialMediaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.JSONSwaggerCreatedResponses'
      security:
      - BearerToken: []
      summary: Create social media
      tags:
      - Social Medias
  /socialmedias/{socialMediaId}:
    delete:
      consumes:
      - application/json
      description: This endpoint for delete social medias
      parameters:
      - description: SocialMediaID
        in: path
        name: socialMediaId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.JSONSwaggerOKResponses'
      security:
      - BearerToken: []
      summary: Delete social medias
      tags:
      - Social Medias
    put:
      consumes:
      - application/json
      description: This endpoint for update social medias
      parameters:
      - description: SocialMediaID
        in: path
        name: socialMediaId
        required: true
        type: integer
      - description: payload
        in: body
        name: services
        required: true
        schema:
          $ref: '#/definitions/dtos.SocialMediaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.JSONSwaggerOKResponses'
      security:
      - BearerToken: []
      summary: Update social medias
      tags:
      - Social Medias
  /users:
    delete:
      consumes:
      - application/json
      description: This endpoint for delete user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.JSONSwaggerOKResponses'
      security:
      - BearerToken: []
      summary: Delete user
      tags:
      - Users
  /users/{userid}:
    put:
      consumes:
      - application/json
      description: This endpoint for update user
      parameters:
      - description: UserID
        in: path
        name: userid
        required: true
        type: integer
      - description: payload
        in: body
        name: services
        required: true
        schema:
          $ref: '#/definitions/dtos.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.JSONSwaggerOKResponses'
      security:
      - BearerToken: []
      summary: Update user
      tags:
      - Users
  /users/login:
    post:
      consumes:
      - application/json
      description: This endpoint for login user
      parameters:
      - description: payload
        in: body
        name: services
        required: true
        schema:
          $ref: '#/definitions/dtos.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.JSONSwaggerOKResponses'
      summary: Login user
      tags:
      - Users
  /users/register:
    post:
      consumes:
      - application/json
      description: This endpoint for create new user
      parameters:
      - description: payload
        in: body
        name: services
        required: true
        schema:
          $ref: '#/definitions/dtos.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.JSONSwaggerCreatedResponses'
      summary: Register New User
      tags:
      - Users
securityDefinitions:
  BearerToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
